classdef testReportTagWriter
    
    properties
    end

    
    methods (Static)

        function commonSpectrumsResultexist(File, iLoger)
            
           if isfield(File.acceleration.spectrum,'amplitude') ...
                    && isfield(File.acceleration.envelopeSpectrum,'amplitude') ...
                    && isfield(File.acceleration.logSpectrum,'amplitude') ...
                    && isfield(File.acceleration.logEnvelopeSpectrum,'amplitude')...
                    && isfield(File.velocity.spectrum,'amplitude') ...
                    && isfield(File.velocity.logSpectrum,'amplitude') ...
                    && isfield(File.displacement.spectrum,'amplitude') ...
                    && isfield(File.displacement.logSpectrum,'amplitude')
                if (length(File.acceleration.spectrum.amplitude) > 1) ...
                        && (length(File.acceleration.envelopeSpectrum.amplitude) > 1) ...
                        && (length(File.acceleration.logSpectrum.amplitude) > 1) ...
                        && (length(File.acceleration.logEnvelopeSpectrum.amplitude) > 1) ...
                        && (length(File.velocity.spectrum.amplitude) > 1) ...
                        && (length(File.velocity.logSpectrum.amplitude) > 1) ...
                        && (length(File.displacement.spectrum.amplitude) > 1) ...
                        && (length(File.displacement.logSpectrum.amplitude) > 1)
                    printComputeInfo(iLoger, 'Filling File-structure', 'Common spectrums calculation returned result exist.'); %RTG: Used for auto-testing
                end
            end 
        end
        
        function octaveSpectrumResultexist(File, iLoger)
            
            if isfield(File.acceleration.octaveSpectrum,'amplitude') ...
                    && isfield(File.acceleration.octaveSpectrum,'frequencies') ...
                    && isfield(File.acceleration.octaveSpectrum,'status')
                if (length(File.acceleration.octaveSpectrum.amplitude) > 1) ...
                        && (length(File.acceleration.octaveSpectrum.frequencies) > 1) 
                    if isa(File.acceleration.octaveSpectrum.status,'cell')  %A.Bourak: changed 'numeric' with 'cell'
                        for i = 1:length(File.acceleration.octaveSpectrum.status)
                            octaveSpectrumStatus = cell2mat(File.acceleration.octaveSpectrum.status(i));
                            if length(octaveSpectrumStatus) == length('RED') 
                                if octaveSpectrumStatus == 'RED'
                                    octaveSpectrumResultExist(i) = 1;
                                end
                            elseif length(octaveSpectrumStatus) == length('GREEN')
                                if octaveSpectrumStatus == 'GREEN'
                                    octaveSpectrumResultExist(i) = 1;
                                end
                            elseif length(octaveSpectrumStatus) == length('ORANGE') 
                                if octaveSpectrumStatus == 'ORANGE'
                                    octaveSpectrumResultExist(i) = 1;
                                end
                            else
                                octaveSpectrumResultExist(i) = 0;                        
                            end 
                        end
                        if all(octaveSpectrumResultExist) == 1
                            printComputeInfo(iLoger, 'Filling File-structure', 'Octave spectrum method returned result exist.');
                        end
                    elseif isa(File.acceleration.octaveSpectrum.status,'numeric')
                        printComputeInfo(iLoger, 'Filling File-structure', 'Octave spectrum method returned result exist.');
                    end                         %A.Bourak: used for auto-testing
                end
            end
            
        end
        
        function metricsResultexist(File, iLoger)
            
            if all(isfield(File.acceleration.metrics.rms,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.peak,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.peak2peak,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.peakFactor,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.crestFactor,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.kurtosis,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.excess,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.noiseLog,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.envelopeNoiseLog,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.noiseLinear,[{'value'},{'status'}])) ...
                    && all(isfield(File.acceleration.metrics.envelopeNoiseLinear,[{'value'},{'status'}])) ...
                    && all(isfield(File.velocity.metrics.rms,[{'value'},{'status'}])) ...
                    && all(isfield(File.velocity.metrics.peak,[{'value'},{'status'}])) ...
                    && all(isfield(File.velocity.metrics.peak2peak,[{'value'},{'status'}])) ...
                    && all(isfield(File.velocity.metrics.peakFactor,[{'value'},{'status'}])) ...
                    && all(isfield(File.velocity.metrics.crestFactor,[{'value'},{'status'}])) ...
                    && all(isfield(File.velocity.metrics.kurtosis,[{'value'},{'status'}])) ...
                    && all(isfield(File.velocity.metrics.excess,[{'value'},{'status'}])) ...
                    && all(isfield(File.velocity.metrics.noiseLog,[{'value'},{'status'}])) ...
                    && all(isfield(File.velocity.metrics.noiseLinear,[{'value'},{'status'}])) ...
                    && all(isfield(File.displacement.metrics.rms,[{'value'},{'status'}])) ...
                    && all(isfield(File.displacement.metrics.peak,[{'value'},{'status'}])) ...
                    && all(isfield(File.displacement.metrics.peak2peak,[{'value'},{'status'}])) ...
                    && all(isfield(File.displacement.metrics.peakFactor,[{'value'},{'status'}])) ...
                    && all(isfield(File.displacement.metrics.crestFactor,[{'value'},{'status'}])) ...
                    && all(isfield(File.displacement.metrics.kurtosis,[{'value'},{'status'}])) ...
                    && all(isfield(File.displacement.metrics.excess,[{'value'},{'status'}])) ...
                    && all(isfield(File.displacement.metrics.noiseLog,[{'value'},{'status'}]))...
                    && all(isfield(File.displacement.metrics.noiseLinear,[{'value'},{'status'}]))   %RTG
                if all(isa([File.acceleration.metrics.rms.value,         File.acceleration.metrics.peak.value, ...
                        File.acceleration.metrics.peak2peak.value,   File.acceleration.metrics.peakFactor.value, ...
                        File.acceleration.metrics.crestFactor.value, File.acceleration.metrics.kurtosis.value, ...
                        File.acceleration.metrics.excess.value,      File.acceleration.metrics.noiseLog.value, ...
                        File.acceleration.metrics.noiseLinear.value, File.acceleration.metrics.envelopeNoiseLog.value, ...
                        File.acceleration.metrics.envelopeNoiseLinear.value, ...
                        File.velocity.metrics.rms.value,             File.velocity.metrics.peak.value, ...
                        File.velocity.metrics.peak2peak.value,       File.velocity.metrics.peakFactor.value, ...
                        File.velocity.metrics.crestFactor.value,     File.velocity.metrics.kurtosis.value, ...
                        File.velocity.metrics.excess.value,          File.velocity.metrics.noiseLinear.value, ...
                        File.velocity.metrics.noiseLog.value, ...
                        File.displacement.metrics.rms.value,         File.displacement.metrics.peak.value, ... 
                        File.displacement.metrics.peak2peak.value,   File.displacement.metrics.peakFactor.value, ...
                        File.displacement.metrics.crestFactor.value, File.displacement.metrics.kurtosis.value, ...
                        File.displacement.metrics.excess.value,      File.displacement.metrics.noiseLog.value, ...
                        File.displacement.metrics.noiseLinear.value], 'numeric'))    %A.Bourak: used for auto-testing
                    metricsStatusFields = [{File.acceleration.metrics.rms.status},         {File.acceleration.metrics.peak.status}, ...
                                           {File.acceleration.metrics.peak2peak.status},   {File.acceleration.metrics.peakFactor.status}, ...
                                           {File.acceleration.metrics.crestFactor.status}, {File.acceleration.metrics.kurtosis.status}, ...
                                           {File.acceleration.metrics.excess.status},      {File.acceleration.metrics.noiseLog.status}, ...
                                           {File.acceleration.metrics.noiseLinear.status}, {File.acceleration.metrics.envelopeNoiseLog.status}, ...
                                           {File.acceleration.metrics.envelopeNoiseLinear.status}, ...
                                           {File.velocity.metrics.rms.status},             {File.velocity.metrics.peak.status}, ...
                                           {File.velocity.metrics.peak2peak.status},       {File.velocity.metrics.peakFactor.status}, ...
                                           {File.velocity.metrics.crestFactor.status},     {File.velocity.metrics.kurtosis.status}, ...
                                           {File.velocity.metrics.excess.status},          {File.velocity.metrics.noiseLinear.status}, ...
                                           {File.velocity.metrics.noiseLog.status}, ...
                                           {File.displacement.metrics.rms.status},         {File.displacement.metrics.peak.status}, ... 
                                           {File.displacement.metrics.peak2peak.status},   {File.displacement.metrics.peakFactor.status}, ...
                                           {File.displacement.metrics.crestFactor.status}, {File.displacement.metrics.kurtosis.status}, ...
                                           {File.displacement.metrics.excess.status},      {File.displacement.metrics.noiseLog.status}, ...
                                           {File.displacement.metrics.noiseLinear.status}];
                    if all(cellfun(@isempty, metricsStatusFields))             
                        printComputeInfo(iLoger, 'Filling File-structure', 'Metrics method returned result exist.');
                    elseif isa(metricsStatusFields, 'cell')
                        for i = 1:length(metricsStatusFields)
                            metricsStatus = cell2mat(metricsStatusFields(i));
                            if length(metricsStatus) == length('RED') 
                                if metricsStatus == 'RED'
                                    metricsResultExist(i) = 1;
                                end
                            elseif length(metricsStatus) == length('GREEN')
                                if metricsStatus == 'GREEN'
                                    metricsResultExist(i) = 1;
                                end
                            elseif length(metricsStatus) == length('ORANGE') || length(metricsStatus) == length('YELLOW')
                                if metricsStatus == 'ORANGE'
                                    metricsResultExist(i) = 1;
                                end  
                                if metricsStatus == 'YELLOW'
                                    metricsResultExist(i) = 1;
                                end
                            else
                                metricsResultExist(i) = 0;                        
                            end 
                        end
                        if all(metricsResultExist) == 1
                            printComputeInfo(iLoger, 'Filling File-structure', 'Metrics method returned result exist.'); %A.Bourak: used for auto-testing
                        end
                    end
                end
            end
            
        end
        
        function iso10816Resultexist(structureIso10816, iLoger)
           
            if isfield(structureIso10816,'status') ...
                    && isfield(structureIso10816,'value')
                if isa(structureIso10816.status,'char') ...
                        && isa(structureIso10816.value,'numeric')...
                        && (structureIso10816.value >= 0)
                    if structureIso10816.status == 'A'
                        printComputeInfo(iLoger, 'Filling metrics', 'ISO10816 method returned result exist.');
                    elseif structureIso10816.status == 'B'
                        printComputeInfo(iLoger, 'Filling metrics', 'ISO10816 method returned result exist.');
                    elseif structureIso10816.status == 'C'
                        printComputeInfo(iLoger, 'Filling metrics', 'ISO10816 method returned result exist.');
                    elseif structureIso10816.status == 'D'
                        printComputeInfo(iLoger, 'Filling metrics', 'ISO10816 method returned result exist.'); %A.Bourak: used for auto-testing
                    end
                end
            end
            
        end
        
        function frequencyTrackingResultexist (File, iLoger)    %A. Bourak added for autotesting 02.11.2017
            if isfield(File.acceleration, 'signal')
                if ~isempty(File.acceleration.signal) && isa(File.acceleration.signal, 'numeric') && ...
                    nnz(~isnan(File.acceleration.signal)) == numel(File.acceleration.signal) && ...
                    nnz(~isinf(File.acceleration.signal)) == numel(File.acceleration.signal) && ...
                    nnz(~File.acceleration.signal) <= numel(File.acceleration.signal)
                
                        printComputeInfo(iLoger, 'Frequency Tracking', 'Frequency Tracking returned result exist.')
                               
                end
            end
        end
        
        function equipmentStateResulexist (equipmentState, equipmentStateData, iLoger)   %A. Bourak added for autotesting 02.11.2017
            if strcmp(equipmentState, 'on') || strcmp(equipmentState, 'off') || strcmp(equipmentState, 'unknown') && ...
               all(isfield(equipmentStateData.acceleration_rms,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.acceleration_peak,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.acceleration_peak2peak,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.acceleration_noiseLog,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.acceleration_envelopeNoiseLog,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.acceleration_noiseLinear,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.acceleration_envelopeNoiseLinear,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.velocity_rms,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.velocity_peak,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.velocity_peak2peak,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.velocity_noiseLog,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.velocity_noiseLinear,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.displacement_rms,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.displacement_peak,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.displacement_peak2peak,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.displacement_noiseLog,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.displacement_noiseLinear,[{'value'},{'weight'},{'state'}])) && ...
               all(isfield(equipmentStateData.calculate_NPeaksSpec,[{'value'},{'weight'},{'state'}]))
           
                if all(isa([equipmentStateData.acceleration_rms.value,                  equipmentStateData.acceleration_rms.weight, ...
                        equipmentStateData.acceleration_peak.value,                      equipmentStateData.acceleration_peak.weight, ...
                        equipmentStateData.acceleration_peak2peak.value,                 equipmentStateData.acceleration_peak2peak.weight, ...
                        equipmentStateData.acceleration_noiseLog.value,                  equipmentStateData.acceleration_noiseLog.weight, ...
                        equipmentStateData.acceleration_envelopeNoiseLog.value,          equipmentStateData.acceleration_envelopeNoiseLog.weight, ...
                        equipmentStateData.acceleration_noiseLinear.value,               equipmentStateData.acceleration_noiseLinear.weight, ...
                        equipmentStateData.acceleration_envelopeNoiseLinear.value,       equipmentStateData.acceleration_envelopeNoiseLinear.weight, ...
                        equipmentStateData.velocity_rms.value,                           equipmentStateData.velocity_rms.weight, ...
                        equipmentStateData.velocity_peak.value,                          equipmentStateData.velocity_peak.weight, ...
                        equipmentStateData.velocity_peak2peak.value,                     equipmentStateData.velocity_peak2peak.weight, ...
                        equipmentStateData.velocity_noiseLog.value,                      equipmentStateData.velocity_noiseLog.weight, ...
                        equipmentStateData.velocity_noiseLinear.value,                   equipmentStateData.velocity_noiseLinear.weight, ...
                        equipmentStateData.displacement_rms.value,                       equipmentStateData.displacement_rms.weight, ...
                        equipmentStateData.displacement_peak.value,                      equipmentStateData.displacement_peak.weight, ...
                        equipmentStateData.displacement_peak2peak.value,                 equipmentStateData.displacement_peak2peak.weight, ...
                        equipmentStateData.displacement_noiseLog.value,                  equipmentStateData.displacement_noiseLog.weight, ...
                        equipmentStateData.displacement_noiseLinear.value,               equipmentStateData.displacement_noiseLinear.weight, ...
                        equipmentStateData.calculate_NPeaksSpec.value,                   equipmentStateData.calculate_NPeaksSpec.weight, ...
                        ], 'numeric'))
                    
                     equipmentDataStateFields = [{equipmentStateData.acceleration_rms.state},                {equipmentStateData.acceleration_peak.state} ...
                                                 {equipmentStateData.acceleration_peak2peak.state},          {equipmentStateData.acceleration_noiseLog.state} ...
                                                 {equipmentStateData.acceleration_envelopeNoiseLog.state},   {equipmentStateData.acceleration_noiseLinear.state} ...
                                                 {equipmentStateData.acceleration_envelopeNoiseLinear.state},{equipmentStateData.velocity_rms.state} ...
                                                 {equipmentStateData.velocity_peak.state},                   {equipmentStateData.velocity_peak2peak.state} ...
                                                 {equipmentStateData.velocity_noiseLog.state},               {equipmentStateData.velocity_noiseLinear.state} ...
                                                 {equipmentStateData.displacement_rms.state},                {equipmentStateData.displacement_peak.state} ...
                                                 {equipmentStateData.displacement_peak2peak.state},          {equipmentStateData.displacement_noiseLog.state} ...
                                                 {equipmentStateData.displacement_noiseLinear.state},        {equipmentStateData.calculate_NPeaksSpec.state}];
                     
                     if all(cellfun(@ischar, equipmentDataStateFields))
                         for i = 1:numel(equipmentDataStateFields)
                             if strcmp(equipmentDataStateFields{i}, 'on') || strcmp(equipmentDataStateFields{i}, 'off') || strcmp(equipmentDataStateFields{i}, 'unknown')
                                equipmentDataStateFlag(i) = 1;
                             else
                                equipmentDataStateFlag(i) = 0;
                             end
                         end
                         if all(equipmentDataStateFlag)
                             printComputeInfo(iLoger, 'Equipment State Detection', 'Equipment State Detection returned result exist.')
                         end
                     end
                end
            end
        end
        
        function iso7919ResultExist(structureIso7919, iLoger)        %A. Bourak added for autotesting 02.11.2017
            if isfield(structureIso7919, 'classType') && isfield(structureIso7919, 'name') && ...
               isfield(structureIso7919, 'elementType') && isfield(structureIso7919, 'enable') && ...
               isfield(structureIso7919, 'priority') && isfield(structureIso7919, 'freq') && ...
               isfield(structureIso7919, 'value') && isfield(structureIso7919, 'status') && ...
               isfield(structureIso7919, 'thresholds')
                if isa([structureIso7919.classType, structureIso7919.name ...
                        structureIso7919.elementType, structureIso7919.status], 'char') && ...
                   isa([structureIso7919.enable, structureIso7919.priority ...
                        structureIso7919.freq, structureIso7919.value...
                        structureIso7919.thresholds], 'numeric')
                            
                    printComputeInfo(iLoger, 'ISO7919 method', 'ISO7919 method returned result exist.')
                end
            end
        end
        
        function timeFrequencyClassifierResultexist (myTimeFrequencyClassifier, iLoger)  %A. Bourak added for autotesting 02.11.2017
            if ~isempty(myTimeFrequencyClassifier.peaksTablesForProcessing) && ...
               ~isempty(myTimeFrequencyClassifier.envSpecStruct) && ...
               ~isempty(myTimeFrequencyClassifier.objectsStruct) && ...
               ~isempty(myTimeFrequencyClassifier.allPeakTables)
                    
                    if iscell([myTimeFrequencyClassifier.peaksTablesForProcessing, myTimeFrequencyClassifier.objectsStruct])
                       for i = 1:numel(myTimeFrequencyClassifier.peaksTablesForProcessing)
                           if ~isempty(myTimeFrequencyClassifier.peaksTablesForProcessing{i}) && isa(myTimeFrequencyClassifier.peaksTablesForProcessing{i}, 'numeric') && ...
                                nnz(~isnan(myTimeFrequencyClassifier.peaksTablesForProcessing{i})) == numel(myTimeFrequencyClassifier.peaksTablesForProcessing{i}) && ...
                                nnz(~isinf(myTimeFrequencyClassifier.peaksTablesForProcessing{i})) == numel(myTimeFrequencyClassifier.peaksTablesForProcessing{i}) && ...
                                nnz(~myTimeFrequencyClassifier.peaksTablesForProcessing{i}) <= numel(myTimeFrequencyClassifier.peaksTablesForProcessing{i})
                            
                                peaksTablesForProcessingFlag(i) = 1;
                           else
                               peaksTablesForProcessingFlag(i) = 0;
                           end
                       end
                       if all(peaksTablesForProcessingFlag)
                           printComputeInfo(iLoger, 'Time-frequency domain Classifier', 'Time-frequency domain Classifier returned result exist.')
                       end
                    end
            end
        end
        
    end
    
end

